{"version":3,"sources":["webpack:////var/www/html/custom/plugins/TigerConnect/src/Resources/app/administration/src/component/mail-select-config/mail-select-config.html.twig","webpack:////var/www/html/custom/plugins/TigerConnect/src/Resources/app/administration/src/component/mail-select-config/index.js"],"names":["Mixin","Shopware","template","mixins","getByName","props","value","type","Array","required","default","data","mailRecipients","this","length","firstName","lastName","email","valid","computed","getColumns","String","property","label","inlineEdit","created","addBlankRow","methods","onInlineEditSave","item","validate","onOptionDelete","filter","recipient","some","push","isValidEmail","createNotificationError","message","$tc","test","emitChanges","validRecipients","$emit","watch"],"mappings":"4IAAe,ICCPA,EAAUC,SAAVD,MAEO,WACXE,SDJW,snBCMXC,OAAQ,CACJH,EAAMI,UAAU,iBAGpBC,MAAO,CACHC,MAAO,CACHC,KAAMC,MACNC,UAAU,EACVC,QAAS,iBAAM,MAIvBC,KAAI,WACA,MAAO,CACHC,eAAgBC,KAAKP,MAAMQ,QAAU,EAAI,CAAC,CAACC,UAAW,GAAIC,SAAU,GAAIC,MAAO,GAAIC,OAAO,IAAUL,KAAKP,QAIjHa,SAAU,CACNC,WAAU,WACN,MAAO,CACH,CACIb,KAAMc,OACNC,SAAU,YACVC,MAAO,aACPC,WAAY,UAEhB,CACIjB,KAAMc,OACNC,SAAU,WACVC,MAAO,YACPC,WAAY,UAEhB,CACIjB,KAAMc,OACNC,SAAU,QACVC,MAAO,SACPC,WAAY,aAM5BC,QAAO,WACHZ,KAAKa,eAGTC,QAAS,CACLC,iBAAgB,SAACC,GACbhB,KAAKiB,SAASD,IAElBE,eAAc,SAACF,GACXhB,KAAKD,eAAiBC,KAAKD,eAAeoB,QAAO,SAAAC,GAAS,OAAIA,EAAUhB,QAAUY,EAAKZ,SACvFJ,KAAKa,eAETA,YAAW,WACFb,KAAKD,eAAesB,MAAK,SAAAD,GAC1B,OAAQA,EAAUhB,QAAUgB,EAAUlB,YAAckB,EAAUjB,aAE9DH,KAAKD,eAAeuB,KAAK,CAACpB,UAAW,GAAIC,SAAU,GAAIC,MAAO,GAAIC,OAAO,KAGjFY,SAAQ,SAACD,GACL,IAAKhB,KAAKuB,aAAaP,EAAKZ,OAKxB,OAJAY,EAAKZ,MAAQ,QACbJ,KAAKwB,wBAAwB,CACzBC,QAASzB,KAAK0B,IAAI,yCAK1B,GAAKV,EAAKZ,OAAUY,EAAKd,WAAcc,EAAKb,SAA5C,CASA,GAFoBH,KAAKD,eAAesB,MAAK,SAAAD,GAAS,OAAIA,IAAcJ,GAAQI,EAAUhB,QAAUY,EAAKZ,SAOrG,OAJAY,EAAKZ,MAAQ,QACbJ,KAAKwB,wBAAwB,CACzBC,QAASzB,KAAK0B,IAAI,2BAK1BV,EAAKX,OAAQ,EACbL,KAAKa,mBAjBDb,KAAKwB,wBAAwB,CACzBC,QAASzB,KAAK0B,IAAI,8BAkB9BH,aAAY,SAACnB,GAET,MADmB,6BACDuB,KAAKvB,IAE3BwB,YAAW,WACP,IAAIC,EAAkB7B,KAAKD,eAAeoB,QAAO,SAAAC,GAAS,OAAIA,EAAUhB,SACxEJ,KAAK8B,MAAM,SAAUD,GACrB7B,KAAK8B,MAAM,eAAgBD,KAGnCE,MAAO,CACHhC,eAAc,WACVC,KAAK4B","file":"static/js/2.js","sourcesContent":["export default \"<sw-data-grid\\n        :showSelection=\\\"false\\\"\\n        :columns=\\\"getColumns\\\"\\n        :dataSource=\\\"mailRecipients\\\"\\n        :allow-inline-edit=\\\"true\\\"\\n        @inline-edit-save=\\\"onInlineEditSave\\\"\\n        itemIdentifierProperty=\\\"email\\\"\\n>\\n    <template\\n            #actions=\\\"{ item }\\\"\\n    >\\n            <sw-context-menu-item\\n                    variant=\\\"danger\\\"\\n                    :disabled=\\\"false\\\"\\n                    @click=\\\"onOptionDelete(item)\\\"\\n            >\\n                {{ $tc('sw-product.variations.generatedListContextMenuDelete') }}\\n            </sw-context-menu-item>\\n    </template>\\n</sw-data-grid>\";","import template from './mail-select-config.html.twig';\nconst { Mixin } = Shopware;\n\nexport default {\n    template,\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        value: {\n            type: Array,\n            required: true,\n            default: () => []\n        }\n    },\n\n    data() {\n        return {\n            mailRecipients: this.value.length <= 0 ? [{firstName: '', lastName: '', email: '', valid: false}] : this.value,\n        };\n    },\n\n    computed: {\n        getColumns() {\n            return [\n                {\n                    type: String,\n                    property: 'firstName',\n                    label: 'First Name',\n                    inlineEdit: 'string',\n                },\n                {\n                    type: String,\n                    property: 'lastName',\n                    label: 'Last Name',\n                    inlineEdit: 'string',\n                },\n                {\n                    type: String,\n                    property: 'email',\n                    label: 'E-mail',\n                    inlineEdit: 'string'\n                }\n            ];\n        }\n    },\n\n    created() {\n        this.addBlankRow();\n    },\n\n    methods: {\n        onInlineEditSave(item) {\n            this.validate(item);\n        },\n        onOptionDelete(item) {\n            this.mailRecipients = this.mailRecipients.filter(recipient => recipient.email !== item.email);\n            this.addBlankRow();\n        },\n        addBlankRow() {\n            if (!this.mailRecipients.some(recipient => {\n                return !recipient.email && !recipient.firstName && !recipient.lastName;\n            })) {\n                this.mailRecipients.push({firstName: '', lastName: '', email: '', valid: false});\n            }\n        },\n        validate(item) {\n            if (!this.isValidEmail(item.email)) {\n                item.email = '';\n                this.createNotificationError({\n                    message: this.$tc('Please enter a valid email address.'),\n                });\n                return;\n            }\n\n            if (!item.email || !item.firstName || !item.lastName) {\n                this.createNotificationError({\n                    message: this.$tc('Please fill all fields.'),\n                });\n                return;\n            }\n\n            const emailExists = this.mailRecipients.some(recipient => recipient !== item && recipient.email === item.email)\n\n            if (emailExists) {\n                item.email = '';\n                this.createNotificationError({\n                    message: this.$tc('Email already exists.'),\n                });\n                return;\n            }\n\n            item.valid = true;\n            this.addBlankRow();\n        },\n        isValidEmail(email) {\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n            return emailRegex.test(email);\n        },\n        emitChanges() {\n            let validRecipients = this.mailRecipients.filter(recipient => recipient.email);\n            this.$emit('change', validRecipients);\n            this.$emit('update:value', validRecipients);\n        }\n    },\n    watch: {\n        mailRecipients() {\n            this.emitChanges();\n        }\n    }\n}\n"],"sourceRoot":""}